version: '3.3'

services:
#ZOOKEEPER
  zookeeper:
      container_name: zookeeper
      restart: always
      image: docker.io/bitnami/zookeeper:3.8
      ports:
        - "2181:2181"
      environment:
        ZOO_MY_ID: 1
        ZOO_SERVERS: server.1=zookeeper:2888:3888
      networks:
        - flight_network

#KAFKA
  kafka:
    container_name: kafka-cntr
    restart: always
    image: docker.io/bitnami/kafka:3.3
    ports:
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - flight_network

#SPARK
spark:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - flight_network

#ELK
elasticsearch:
    build:
      context: .
      dockerfile: Dockerfile.elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
    networks:
      - flight_network

#KIBANA
kibana:
    build:
      context: .
      dockerfile: Dockerfile.kibana
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - flight_network

networks:
  flight_network:
    driver: bridge

volumes:
  elasticsearch_data:
    driver: local
  kibana_data:
    driver: local

  
        
